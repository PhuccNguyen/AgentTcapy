// src/components/dashboard/ChatAIPanel.jsx
import React, { useState, useRef, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { SendIcon, AttachmentIcon, MicrophoneIcon } from '../icons';
import './ChatAIPanel.css';

const ChatAIPanel = () => {
  const [messages, setMessages] = useState([
    {
      id: 1,
      type: 'assistant',
      content: 'Hello! I am your TCAPY-AI assistant. How can I help you today?',
      timestamp: new Date()
    }
  ]);
  const [inputValue, setInputValue] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const messagesEndRef = useRef(null);
  
  // Auto scroll to bottom when new messages arrive
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);
  
  const handleInputChange = (e) => {
    setInputValue(e.target.value);
  };
  
  const handleSubmit = (e) => {
    e.preventDefault();
    
    if (inputValue.trim()) {
      // Add user message
      const userMessage = {
        id: messages.length + 1,
        type: 'user',
        content: inputValue.trim(),
        timestamp: new Date()
      };
      
      setMessages(prevMessages => [...prevMessages, userMessage]);
      setInputValue('');
      setIsTyping(true);
      
      // Simulate AI response with a delay
      setTimeout(() => {
        // In a real app, this would involve an API call to your AI service
        const aiMessage = {
          id: messages.length + 2,
          type: 'assistant',
          content: `This is a simulated response to "${inputValue.trim()}". In the actual application, this would be generated by the TCAPY-AI backend service.`,
          timestamp: new Date()
        };
        
        setMessages(prevMessages => [...prevMessages, aiMessage]);
        setIsTyping(false);
      }, 1500);
    }
  };
  
  // Format timestamp to HH:MM format
  const formatTime = (timestamp) => {
    return new Intl.DateTimeFormat('default', {
      hour: '2-digit',
      minute: '2-digit'
    }).format(timestamp);
  };
  
  const messageVariants = {
    hidden: { opacity: 0, y: 10 },
    visible: { opacity: 1, y: 0, transition: { duration: 0.3 } }
  };
  
  return (
    <div className="chat-ai-panel">
      <div className="chat-container">
        <div className="chat-header">
          <div className="chat-info">
            <div className="chat-avatar">
              <img src="/assets/images/ai-avatar.svg" alt="TCAPY-AI Assistant" />
            </div>
            <div className="chat-status">
              <h2>TCAPY-AI Assistant</h2>
              <span className="status-indicator online">Online</span>
            </div>
          </div>
          <div className="chat-actions">
            {/* Additional actions like clear chat, export, etc. */}
            <button className="action-button">
              <i className="fas fa-ellipsis-v"></i>
            </button>
          </div>
        </div>
        
        <div className="chat-messages">
          <AnimatePresence>
            {messages.map((message) => (
              <motion.div
                key={message.id}
                className={`message-container ${message.type === 'user' ? 'user' : 'assistant'}`}
                variants={messageVariants}
                initial="hidden"
                animate="visible"
              >
                <div className="message-avatar">
                  {message.type === 'assistant' ? (
                    <img src="/assets/images/ai-avatar.svg" alt="TCAPY-AI" />
                  ) : (
                    <img src="/assets/images/user-avatar.svg" alt="User" />
                  )}
                </div>
                <div className={`message ${message.type}`}>
                  <div className="message-content">{message.content}</div>
                  <div className="message-time">{formatTime(message.timestamp)}</div>
                </div>
              </motion.div>
            ))}
            
            {isTyping && (
              <motion.div
                className="message-container assistant"
                variants={messageVariants}
                initial="hidden"
                animate="visible"
              >
                <div className="message-avatar">
                  <img src="/assets/images/ai-avatar.svg" alt="TCAPY-AI" />
                </div>
                <div className="message assistant typing">
                  <div className="typing-indicator">
                    <span></span>
                    <span></span>
                    <span></span>
                  </div>
                </div>
              </motion.div>
            )}
            
            <div ref={messagesEndRef} />
          </AnimatePresence>
        </div>
        
        <form className="chat-input-container" onSubmit={handleSubmit}>
          <button type="button" className="attachment-button">
            <AttachmentIcon />
          </button>
          
          <div className="input-wrapper">
            <input
              type="text"
              className="chat-input"
              placeholder="Type your message..."
              value={inputValue}
              onChange={handleInputChange}
              autoFocus
            />
          </div>
          
          <button type="button" className="voice-button">
            <MicrophoneIcon />
          </button>
          
          <button 
            type="submit" 
            className={`send-button ${inputValue.trim() ? 'active' : ''}`}
            disabled={!inputValue.trim()}
          >
            <SendIcon />
          </button>
        </form>
      </div>
      
      <div className="chat-sidebar">
        <div className="chat-sidebar-header">
          <h3>Chat History</h3>
          <button className="new-chat-button">
            <i className="fas fa-plus"></i> New Chat
          </button>
        </div>
        
        <div className="chat-history-list">
          <div className="chat-history-item active">
            <div className="history-icon">ðŸ’¬</div>
            <div className="history-content">
              <h4>Current Chat</h4>
              <p>Started just now</p>
            </div>
          </div>
          
          <div className="chat-history-item">
            <div className="history-icon">ðŸ’¬</div>
            <div className="history-content">
              <h4>Previous Chat</h4>
              <p>2 days ago</p>
            </div>
          </div>
        </div>
        
        <div className="chat-sidebar-section">
          <h3>Suggested Prompts</h3>
          <div className="suggested-prompts">
            <button className="prompt-button">
              "Explain TCAPY-AI features"
            </button>
            <button className="prompt-button">
              "How to generate text content?"
            </button>
            <button className="prompt-button">
              "What can you help me with?"
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ChatAIPanel;